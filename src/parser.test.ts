import * as parser from "./parser";

/**
 * @see https://abakbot.com/en/net-en/rpn-en#solution
 */
describe("Parser correct cases", () => {
  test.each([
    ["1 !", [1, "!"]],
    ["1 **", [1, "**"]],
    ["1 + 1", [1, 1, "+"]],
    ["1 + 2 * 3", [1, 2, 3, "*", "+"]],
    ["( ( 1 ) )", [1]],
    ["( 1 + 2 ) * 3", [1, 2, "+", 3, "*"]],
    ["15 / ( 7 - ( 1 + 1 ) )", [15, 7, 1, 1, "+", "-", "/"]],
    ["1 * 2 + 2 / 1 - 5", [1, 2, "*", 2, 1, "/", "+", 5, "-"]],
    ["1 ! + 2 * 2 ** - 5 * 3 ^ 3", [1, "!", 2, 2, "**", "*", "+", 5, 3, 3, "^", "*", "-"]],
    ["15 / ( 7 - ( 1 + 1 ) ) * 3 - ( 2 + ( 1 + 1 ) )", [15, 7, 1, 1, "+", "-", "/", 3, "*", 2, 1, 1, "+", "+", "-"]],
    ["sin 90", [90, "sin"]],
    ["sin 45 + 45", [45, "sin", 45, "+"]],
    ["sin ( 45 + 45 )", [45, 45, "+", "sin"]],
    ["sin ( 3 ** )", [3, "**", "sin"]],
    ["sin cos 45", [45, "cos", "sin"]],
    ["sin 20 * cos 40", [20, "sin", 40, "cos", "*"]],
    ["cos ( 90 ) - 1 / 2 * sin ( 90 ^ 2 - 2 )", [90, "cos", 1, 2, "/", 90, 2, "^", 2, "-", "sin", "*", "-"]],
    ["1 / 2 + ( 2 + 3 ) / ( sin ( 9 - 2 ) ^ 2 - 6 / 7 )", [1, 2, "/", 2, 3, "+", 9, 2, "-", "sin", 2, "^", 6, 7, "/", "-", "/", "+"]],
  ])('%s', (input, expected) => {
    expect(parser.parseString(input)).toEqual(expected);
  });
});

describe("Parser invalid cases", () => {
    test.each([
      ["1 . 33"],
      ["+ 1"],
      ["1 +"],
      ["2 + * 2"],
      ["2 + 2 *"],
      ["2 2 +"],
      ["( ( 1 + ) )"],
      ["( 1 ( ) )"],
      ["( ) 2 + 2 ) "],
      ["( 2 + 2 ) ("],
      ["( 2 + 2 ) )"],
      ["( ( 2 + 2 )"],
      ["2 + 2 2 + 2"],
      ["2 + 2 + 2 2"],
    ])('%s', (input) => {
      expect(() => parser.parseString(input)).toThrow(TypeError("Unexpected string"));
    });
});
