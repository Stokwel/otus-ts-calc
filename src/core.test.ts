import * as core from "./core";

describe("Calc correct cases", () => {
  test.each([
    ["3 !", 6],
    ["3 **", 9],
    ["10 / 2", 5],
    ["1 + 2 * 3", 7],
    ["1 * 2 + 2 / 1 - 5", -1],
    ["1 ! + 2 * 2 ** - 5 * 3 ^ 3", -126],
    ["( 1 + 2 ) * 3", 9],
    ["15 / ( 7 - ( 1 + 1 ) ) **", 0.6],
    ["15 / ( 7 - ( 1 + 1 ) ^ 2 )", 5],
    ["15 / ( 7 - ( 1 + 1 ) ) * 3 - ( 2 + ( 1 + 1 ) )", 5],
    ["sin 90", 1],
    ["sin 45 + 45", 45.7071],
    ["sin ( 45 + 45 )", 1],
    ["sin cos 45", 0.0123],
    ["sin 5 !", 0.866],
    ["sin 3 **", 0.0027],
    ["sin ( 3 ** )", 0.1564],
    ["sin 20 * cos 40", 0.262],
    ["sin 20 * cos 40 + cos 20 * sin ( 40 )", 0.866],
    ["cos ( 90 ) - 1 / 2 * sin ( 90 ^ 2 - 2 )", -0.0174],
    ["1 / 2 + ( 2 + 3 ) / ( sin ( 9 - 2 ) ^ 2 - 6 / 7 )", -5.4362],
  ])('%s', (input, expected) => {
    expect(core.runCalculate(input)).toEqual(expected);
  });
});

describe("Poland calc correct cases", () => {
  test.each([
    ["3 !", 6],
    ["3 **", 9],
    ["2 2 3 * +", 8], // 2 + 2 * 3
    ["2 2 + 3 *", 12], // // (2 + 2) * 3
    ["90 cos 1 2 / 90 2 ^ 2 - sin * -", -0.0174], // cos ( 90 ) - 1 / 2 * sin ( 90 ^ 2 - 2 )
    ["15 7 1 1 + - / 3 * 2 1 1 + + -", 5], // 15 / ( 7 - ( 1 + 1 ) ) * 3 - ( 2 + ( 1 + 1 ) )
    ["1 2 / 2 3 + 9 2 - sin 2 ^ 6 7 / - / +", -5.4362], // 1 / 2 + ( 2 + 3 ) / ( sin ( 9 - 2 ) ^ 2 - 6 / 7 )
  ])('%s', (input, expected) => {
    expect(core.runCalculatePoland(input)).toEqual(expected);
  });
});
